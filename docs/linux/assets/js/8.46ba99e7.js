(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{328:function(t,s,e){"use strict";e.r(s);var n=e(33),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"要点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),e("p",[t._v("Linux系统博大精深，学习Linux的资料浩瀚如大海。本文档不打算再做重复造轮子的事情，我们尽量根据实践中很常见的"),e("strong",[t._v("技术要点")]),t._v("进行讲解，同时列出一些操作范例：")]),t._v(" "),e("h2",{attrs:{id:"发行版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发行版"}},[t._v("#")]),t._v(" 发行版")]),t._v(" "),e("p",[t._v("Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。后面Linux发展成为一个强大的生态体系，慢慢的就有一些专业公司基于内核再组合了一些应用软件，形成了多种分支，也就是发行版。")]),t._v(" "),e("p",[t._v("目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://libs.websoft9.com/Websoft9/DocsPicture/zh/linux/linux-distro-websoft9.png",alt:""}})]),t._v(" "),e("p",[t._v("这些版本并非完全独立，它们之前有着共同的家族关系：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://libs.websoft9.com/Websoft9/DocsPicture/zh/linux/linux-family-websoft9.jpg",alt:""}})]),t._v(" "),e("p",[t._v("虽然版本繁多，实际上最流行的是：CentOS和Ubuntu这个两个发行版。")]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("如果你没有使用云服务器或虚拟机，就需要安装Linux。下面只大体介绍Linux系统的安装流程：")]),t._v(" "),e("ul",[e("li",[t._v("下载Linux系统（一般是ISO文件）")]),t._v(" "),e("li",[t._v("制作启动盘")]),t._v(" "),e("li",[t._v("开机进入图形化的交互式安装界面")]),t._v(" "),e("li",[t._v("安装完成")])]),t._v(" "),e("h2",{attrs:{id:"启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[t._v("#")]),t._v(" 启动")]),t._v(" "),e("p",[t._v("Linux系统的启动过程分为如下几个阶段：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("开机自检：打开电源，BIOS进行硬件自检")])]),t._v(" "),e("li",[e("p",[t._v("引导加载：自检通过后，进入MBR引导加载程序（MBR是硬盘中第一个扇区的前512个字节, 称为 main boot record）")])]),t._v(" "),e("li",[e("p",[t._v("内核初始化：加载内核（Kernel）代码，即读入 /boot 目录下的内核文件，监测设备并加载设备驱动程序")])]),t._v(" "),e("li",[e("p",[t._v("Systemd初始化（替代init），获取系统控制权")]),t._v(" "),e("ul",[e("li",[t._v("执行Systemd程序，Systemd是一个管理进程的进程程序，也是操作系统的第一个进程，其PID=1")]),t._v(" "),e("li",[t._v("读取 /etc/systemd 下的配置文件")]),t._v(" "),e("li",[t._v("读取 /etc/systemd/system/default.target 下的运行级别文件")]),t._v(" "),e("li",[t._v("执行 "),e("em",[t._v("/etc/rc.d/rc.local")]),t._v(" 文件中的程序")])])])]),t._v(" "),e("p",[t._v("2-4 是由GRUB（Grand Unified Bootloader）负责的。其中GRUB boot loader 代码的一小部分（子集）被写入MBR，其余部分存储在/boot分区中")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("p",[t._v("Systemd 执行系统初始化")]),t._v(" "),e("ul",[e("li",[t._v("设置主机名")]),t._v(" "),e("li",[t._v("初始化网络")]),t._v(" "),e("li",[t._v("基于配置初始化 SElinux")]),t._v(" "),e("li",[t._v("显示欢迎标语")]),t._v(" "),e("li",[t._v("基于内核参数初始化硬件")]),t._v(" "),e("li",[t._v("加载文件系统")]),t._v(" "),e("li",[t._v("清除 /var 中的目录")]),t._v(" "),e("li",[t._v("启动交换分区")])])]),t._v(" "),e("li",[e("p",[t._v("建立终端：系统打开6个终端，以便用户登录系统。")])]),t._v(" "),e("li",[e("p",[t._v("用户登录系统：用户登录使用Linux")])])]),t._v(" "),e("h2",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),e("p",[t._v("通过下面的一张图（右键在新窗口中打开，图片效果更好），我们了解Linux系统的目录结构")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://libs.websoft9.com/Websoft9/DocsPicture/zh/linux/linux-folders-websoft9.jpg",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"编码与字体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编码与字体"}},[t._v("#")]),t._v(" 编码与字体")]),t._v(" "),e("p",[t._v("一个字符（不管是中文还是英文，或是其它文字）在计算机里都是以0101这样数字存放的，编码就是某个字符是以一个什么数字存放在计算机里的。")]),t._v(" "),e("p",[t._v("字符编码有名为字符集。其原理一句话解释：不同语言对应的机器编码。目前最常用的是"),e("strong",[t._v("UTF-8")]),t._v("编码方式，下面就是通一个字符在不同字符编码下的机器代码：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("语言")]),t._v(" "),e("th",[t._v("示例")]),t._v(" "),e("th",[t._v("UTF-8编码")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("中文")]),t._v(" "),e("td",[t._v("你好")]),t._v(" "),e("td",[t._v("\\xE4\\xBD\\xA0\\xE5\\xA5\\xBD")])]),t._v(" "),e("tr",[e("td",[t._v("英文")]),t._v(" "),e("td",[t._v("Hello")]),t._v(" "),e("td",[t._v("\\x68\\x65\\x6C\\x6C\\x6F")])])])]),t._v(" "),e("p",[t._v("编码决定字符的存放，字体决定字符的显示。")]),t._v(" "),e("p",[t._v("字体决定一个字符在界面上显示出来的形状，比如同样是'A'用不同的字体显示出来的形状是不一样的。")]),t._v(" "),e("p",[t._v("同样的文件内容，在屏幕上的输出同时取决于用什么编码和字体。")]),t._v(" "),e("h3",{attrs:{id:"查看编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看编码"}},[t._v("#")]),t._v(" 查看编码")]),t._v(" "),e("p",[t._v("我们在Linux中输入 "),e("code",[t._v("locale")]),t._v(" 命令，会得到如下的结果：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[root@test ~]# locale\nLANG=en_US.UTF-8\nLC_CTYPE="en_US.UTF-8"\nLC_NUMERIC="en_US.UTF-8"\nLC_TIME="en_US.UTF-8"\nLC_COLLATE="en_US.UTF-8"\nLC_MONETARY="en_US.UTF-8"\nLC_MESSAGES="en_US.UTF-8"\nLC_PAPER="en_US.UTF-8"\nLC_NAME="en_US.UTF-8"\nLC_ADDRESS="en_US.UTF-8"\nLC_TELEPHONE="en_US.UTF-8"\nLC_MEASUREMENT="en_US.UTF-8"\nLC_IDENTIFICATION="en_US.UTF-8"\nLC_ALL=\n')])])]),e("p",[t._v("en_US.UTF-8 是 UTF-8 的子集，也就是说en_US.UTF-8也是支持中文字符的。区别在于zh_US.UTF-8能够支持更多的汉语特殊字符。")]),t._v(" "),e("h3",{attrs:{id:"修改编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改编码"}},[t._v("#")]),t._v(" 修改编码")]),t._v(" "),e("p",[t._v("如果想切换操作系统的默认显示的语言，就必须修改默认的编码。")]),t._v(" "),e("h3",{attrs:{id:"字体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字体"}},[t._v("#")]),t._v(" 字体")]),t._v(" "),e("p",[t._v("我们在实际操作中发现即使当前是en_US.UTF-8编码，如果安装下面的命令后，操作系统便可以正常显示中文。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('yum groupinstall "fonts"\n')])])]),e("p",[t._v("这是为什么呢？ 这个要从计算图形学的角度去分析。编码解决了字符是否可以被计算的问题，而字体解决的是字符渲染成图像，被人识别的问题。")]),t._v(" "),e("p",[t._v("即，如果你希望可以显示中文，你的服务器就必须有中文字体。")]),t._v(" "),e("blockquote",[e("p",[t._v("最后我们来总结：字符编码就是把二进制字节码文件转成计算机能够懂的文字；字体就是把计算机中的文字转换成人能够看懂的图像")])]),t._v(" "),e("h2",{attrs:{id:"linux与云计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux与云计算"}},[t._v("#")]),t._v(" Linux与云计算")]),t._v(" "),e("p",[t._v("在当前的云计算领域，毫无疑问Linux系统是最重要的基石。")]),t._v(" "),e("p",[t._v("掌握了Linux就等于拿到了云计算领域的入场券。")]),t._v(" "),e("h2",{attrs:{id:"linux命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux命令"}},[t._v("#")]),t._v(" Linux命令")]),t._v(" "),e("p",[t._v("Linux命令是对Linux系统进行管理的命令。对于Linux系统来说，无论是CPU、内存、磁盘驱动器、键盘、鼠标，还是用户等都是文件，Linux系统管理的命令是它正常运行的核心，与之前的DOS命令类似。")]),t._v(" "),e("p",[t._v("更多命令参考："),e("a",{attrs:{href:"https://man.linuxde.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Linux命令大全》"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"软（硬）连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#软（硬）连接"}},[t._v("#")]),t._v(" 软（硬）连接")]),t._v(" "),e("p",[t._v("Linux中的软连接和硬连接很常用，下面分别介绍。")]),t._v(" "),e("h3",{attrs:{id:"软连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#软连接"}},[t._v("#")]),t._v(" 软连接")]),t._v(" "),e("p",[t._v("软连接是指向另外一个文件的文件，类似Windows中的快捷方式文件。")]),t._v(" "),e("p",[t._v("如何才能知道哪些文件是软连接文件呢？")]),t._v(" "),e("h4",{attrs:{id:"查询软连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询软连接"}},[t._v("#")]),t._v(" 查询软连接")]),t._v(" "),e("p",[t._v("我们先进入etc目录，然后列出文件（以re关键词作为结果筛选）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("root@test:/etc# ls -l | grep re\n-rw-r--r-- 1 root root     367 Jan 27  2016 bindresvport.blacklist\ndrwxr-xr-x 2 root root    4096 Apr  9 06:04 firefox\nlrwxrwxrwx 1 root root      33 Dec 25 16:13 localtime -> /usr/share/zoneinfo/Asia/Shanghai\n-rw-r--r-- 1 root root     105 Jan 30 20:28 lsb-release\nlrwxrwxrwx 1 root root      21 Jan 30 20:28 os-release -> ../usr/lib/os-release\ndrwxr-xr-x 4 root root    4096 Dec 25 16:13 resolvconf\nlrwxrwxrwx 1 root root      29 Dec 25 16:13 resolv.conf -> ../run/resolvconf/resolv.conf\n-rw-r--r-- 1 root root    3663 Jun  9  2015 screenrc\n-rw-r--r-- 1 root root    4141 Jan 25  2018 securetty\n-rw-r--r-- 1 root root    1656 Jul 25  2019 tmpreaper.conf\n\nroot@test:/etc# ls -l | grep ^l\nlrwxrwxrwx 1 root root      33 Dec 25 16:13 localtime -> /usr/share/zoneinfo/Asia/Shanghai\nlrwxrwxrwx 1 root root      19 Dec 26 00:11 mtab -> ../proc/self/mounts\nlrwxrwxrwx 1 root root      21 Jan 30 20:28 os-release -> ../usr/lib/os-release\nlrwxrwxrwx 1 root root      29 Dec 25 16:13 resolv.conf -> ../run/resolvconf/resolv.conf\nlrwxrwxrwx 1 root root      23 Dec 25 16:08 vtrgb -> /etc/alternatives/vtrgb\n\n")])])]),e("p",[t._v("上面的例子中，我们运行了 "),e("code",[t._v("ls -l")]),t._v(" 命令，显示了几种不同类型的文件：")]),t._v(" "),e("ul",[e("li",[t._v("lrwxrwxrwx: 这种以l开头的就是软连接文件")]),t._v(" "),e("li",[t._v("drwxr-xr-x：这种以d开头的就是目录")]),t._v(" "),e("li",[t._v("-rw-r--r--：这种以-开头的就是文件")])]),t._v(" "),e("p",[t._v("了解了什么是软连接之后，我们就可以自己动手进行软连接的相关操作：")]),t._v(" "),e("h4",{attrs:{id:"创建软连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建软连接"}},[t._v("#")]),t._v(" 创建软连接")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cd /root\nln -s /usr/share/zoneinfo/Asia/Shanghai2 mysoftlink\nfile mysoftlink\n")])])]),e("h4",{attrs:{id:"删除软连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除软连接"}},[t._v("#")]),t._v(" 删除软连接")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rm -rf mysoftlink\n")])])]),e("p",[t._v("注意事项：")]),t._v(" "),e("ol",[e("li",[t._v("被连接的文件名（路径）建议采用绝对路径")]),t._v(" "),e("li",[t._v("错误的软连接（又名断开）使用 "),e("code",[t._v("ls -l")]),t._v(" 的时候显示的是红色")]),t._v(" "),e("li",[t._v("软连接是一个文件，其在硬盘中是存在数据块的")]),t._v(" "),e("li",[t._v("软连接文件的数据库中存储的是路径信息，而非真正的数据")]),t._v(" "),e("li",[t._v("软连接可能是多级嵌套的，例如：B连接A，C连接B，D连接C")])]),t._v(" "),e("h3",{attrs:{id:"硬连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#硬连接"}},[t._v("#")]),t._v(" 硬连接")]),t._v(" "),e("p",[t._v("硬连接相对于软连接来说，理解会困难一点点。硬连接是把不同的文件名对应到同一个存储块节点上。")]),t._v(" "),e("p",[t._v("例如：在服务器硬盘中有一个数据块存在的是一段小视频，这个小视频的文件名称为：/data/mymedia.mp4。")]),t._v(" "),e("p",[t._v("创建一个硬连接，只需使用"),e("code",[t._v("ln")]),t._v("命令即可")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cd /data\nln /data/mymedia.mp4  mymedia2.mp4\n")])])]),e("p",[t._v("注意事项：")]),t._v(" "),e("ol",[e("li",[t._v("被连接的文件名（路径）建议采用绝对路径")]),t._v(" "),e("li",[t._v("如果一个文件增加了对应的硬连接，那么删除文件的时候不会删除数据")]),t._v(" "),e("li",[t._v("硬连接文件存储的是真实数据块位置")]),t._v(" "),e("li",[t._v("只能对文件建立硬连接，而不能对一个目录建立硬连接")])]),t._v(" "),e("blockquote",[e("p",[t._v("硬链接与域名管理中的同一个网站，用A记录配置上两个域名是同类原理。"),e("br"),t._v("\n软连接与域名管理中的cname解析是同类原理。")])]),t._v(" "),e("h2",{attrs:{id:"环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),e("p",[t._v("环境变量即操作系统的变量。环境变量非常灵活，在实际使用过程中需要深刻理解几个关键要点：环境变量作用域、环境变量存放处以及存储环境变量的文件的开机启动顺序。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 列出所有变量\nset\n\n# 列出所有环境变量\nenv\n\n# 列出和设置环境变量\nexport \nexport varname\n\n# 列出所有别名\nalias\n")])])]),e("h2",{attrs:{id:"进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),e("p",[t._v("进程是操作系统的资源管理和调度单元。")]),t._v(" "),e("ul",[e("li",[t._v("当一个用户通过登录Linux系统，他就启动了一个shell进程")]),t._v(" "),e("li",[t._v("当一个进程创建另一个进程，就产生父进程和子进程的关系")]),t._v(" "),e("li",[t._v("当子进程运行时，父进程处于等待服务的状态，子进程完成它的工作后就会报告给父进程，再由父进程终止子进程")])]),t._v(" "),e("p",[t._v("运行 "),e("code",[t._v("ps -ef")]),t._v(" 列出所有进程:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("UID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 Apr26 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22\nroot         2     0  0 Apr26 ?        00:00:00 [kthreadd]\nroot         4     2  0 Apr26 ?        00:00:00 [kworker/0:0H]\nroot         6     2  0 Apr26 ?        00:00:00 [ksoftirqd/0]\nroot         7     2  0 Apr26 ?        00:00:00 [migration/0]\nroot         8     2  0 Apr26 ?        00:00:00 [rcu_bh]\nroot         9     2  0 Apr26 ?        00:00:00 [rcu_sched]\nroot        10     2  0 Apr26 ?        00:00:00 [lru-add-drain]\nroot        11     2  0 Apr26 ?        00:00:00 [watchdog/0]\nroot        12     2  0 Apr26 ?        00:00:00 [watchdog/1]\n")])])]),e("p",[t._v("如果仅ps命令不带参数，其仅列出所在Shell所调度运行的进程（不会列出如何系统的守护进程）")]),t._v(" "),e("p",[t._v("运行 "),e("code",[t._v("ps tree")]),t._v(" 命令，列出进程树")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("systemd─┬─NetworkManager─┬─dhclient\n        │                └─2*[{NetworkManager}]\n        ├─2*[abrt-watch-log]\n        ├─abrtd\n        ├─accounts-daemon───2*[{accounts-daemon}]\n        ├─at-spi-bus-laun─┬─dbus-daemon\n        │                 └─3*[{at-spi-bus-laun}]\n        ├─at-spi2-registr───2*[{at-spi2-registr}]\n        ├─atd\n        ├─auditd─┬─audispd─┬─sedispatch\n        │        │         └─{audispd}\n        │        └─{auditd}\n        ├─boltd───2*[{boltd}]\n        ├─chronyd\n        ├─colord───2*[{colord}]\n        ├─crond\n        ├─cupsd\n        ├─2*[dbus-daemon]\n        ├─dbus-launch\n        ├─gdm─┬─X───3*[{X}]\n        │     ├─gdm-session-wor─┬─gnome-session-b─┬─gnome-shell─┬─ibus-daemon─┬─ibus-dconf───3*[{ibus-dconf}]\n        │     │                 │                 │             │             ├─ibus-engine-sim───2*[{ibus-engine-sim}]\n        │     │                 │                 │             │             └─2*[{ibus-daemon}]\n        │     │                 │                 │             └─14*[{gnome-shell}]\n        │     │                 │                 ├─gsd-a11y-settin───3*[{gsd-a11y-settin}]\n        │     │                 │                 ├─gsd-clipboard───2*[{gsd-clipboard}]\n        │     │                 │                 ├─gsd-color───3*[{gsd-color}]\n        │     │                 │                 ├─gsd-datetime───2*[{gsd-datetime}]\n        │     │                 │                 ├─gsd-housekeepin───2*[{gsd-housekeepin}]\n        │     │                 │                 ├─gsd-keyboard───3*[{gsd-keyboard}]\n        │     │                 │                 ├─gsd-media-keys───3*[{gsd-media-keys}]\n        │     │                 │                 ├─gsd-mouse───2*[{gsd-mouse}]\n        │     │                 │                 ├─gsd-power───3*[{gsd-power}]\n        │     │                 │                 ├─gsd-print-notif───2*[{gsd-print-notif}]\n        │     │                 │                 ├─gsd-rfkill───2*[{gsd-rfkill}]\n        │     │                 │                 ├─gsd-screensaver───2*[{gsd-screensaver}]\n        │     │                 │                 ├─gsd-sharing───3*[{gsd-sharing}]\n        │     │                 │                 ├─gsd-smartcard───4*[{gsd-smartcard}]\n        │     │                 │                 ├─gsd-sound───3*[{gsd-sound}]\n        │     │                 │                 ├─gsd-wacom───2*[{gsd-wacom}]\n        │     │                 │                 ├─gsd-xsettings───3*[{gsd-xsettings}]\n        │     │                 │                 └─3*[{gnome-session-b}]\n        │     │                 └─2*[{gdm-session-wor}]\n        │     └─3*[{gdm}]\n        ├─ibus-portal───2*[{ibus-portal}]\n        ├─ibus-x11───2*[{ibus-x11}]\n        ├─irqbalance\n        ├─lvmetad\n        ├─polkitd───6*[{polkitd}]\n        ├─pulseaudio───{pulseaudio}\n        ├─python\n        ├─rsyslogd───2*[{rsyslogd}]\n        ├─rtkit-daemon───2*[{rtkit-daemon}]\n        ├─sshd─┬─4*[sshd───bash]\n        │      ├─3*[sshd───sftp-server]\n        │      └─sshd───bash───pstree\n        ├─systemd-journal\n        ├─systemd-logind\n        ├─systemd-udevd\n        ├─tuned───4*[{tuned}]\n        ├─udisksd───4*[{udisksd}]\n        ├─upowerd───2*[{upowerd}]\n        ├─wpa_supplicant\n        ├─wrapper─┬─java───14*[{java}]\n        │         └─{wrapper}\n        └─xdg-permission-───2*[{xdg-permission-}]\n")])])]),e("p",[t._v("还有更多与进程有关的命令是需要我们掌握的，包括：")]),t._v(" "),e("ul",[e("li",[t._v("kill  终止进程，以PID作为标识")]),t._v(" "),e("li",[t._v("pkill 终止进程，以名称作为标识")]),t._v(" "),e("li",[t._v("pgrep 查询PID")])]),t._v(" "),e("h3",{attrs:{id:"守护进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#守护进程"}},[t._v("#")]),t._v(" 守护进程")]),t._v(" "),e("p",[t._v("什么是守护进程？就是在后台运行的一个程序，主要提供一些系统服务。例如：httpd,nginx 等")]),t._v(" "),e("p",[t._v("守护进程是怎么工作的？它时刻等待事件的发生，当它收到一个请求事件之后，就会为需要处理这个事件创建一个子进程，然后它继续等待后续事件")]),t._v(" "),e("p",[t._v("根据事件的处理方式来看，守护进程分为：")]),t._v(" "),e("ul",[e("li",[t._v("独立守护进程")]),t._v(" "),e("li",[t._v("临时守护进程")])]),t._v(" "),e("p",[t._v("临时守护进程无法直接面对请求事件，只能被 "),e("strong",[t._v("xinetd")]),t._v(" 这个超级守护进程分配任务。")]),t._v(" "),e("h2",{attrs:{id:"systemd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemd"}},[t._v("#")]),t._v(" Systemd")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.freedesktop.org/software/systemd/man/systemd.unit.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Systemd"),e("OutboundLink")],1),t._v(" 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。")]),t._v(" "),e("blockquote",[e("p",[t._v("学习Systemd，参考阮一峰提供的通俗易懂的教程："),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Systemd 入门教程：实战篇》"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://libs.websoft9.com/Websoft9/DocsPicture/zh/linux/systemd-components-websoft9.png",alt:""}})]),t._v(" "),e("p",[t._v("Systemd 把每一项处理的任务以"),e("strong",[t._v("单元")]),t._v("形式组织起来，所支持的各种类型的单元包括：")]),t._v(" "),e("ul",[e("li",[t._v("Service unit：系统服务")]),t._v(" "),e("li",[t._v("Target unit：多个 Unit 构成的一个组")]),t._v(" "),e("li",[t._v("Device Unit：硬件设备")]),t._v(" "),e("li",[t._v("Mount Unit：文件系统的挂载点")]),t._v(" "),e("li",[t._v("Automount Unit：自动挂载点")]),t._v(" "),e("li",[t._v("Path Unit：文件或路径")]),t._v(" "),e("li",[t._v("Scope Unit：不是由 Systemd 启动的外部进程")]),t._v(" "),e("li",[t._v("Slice Unit：进程组")]),t._v(" "),e("li",[t._v("Snapshot Unit：Systemd 快照，可以切回某个快照")]),t._v(" "),e("li",[t._v("Socket Unit：进程间通信的 socket")]),t._v(" "),e("li",[t._v("Swap Unit：swap 文件")]),t._v(" "),e("li",[t._v("Timer Unit：定时器")])]),t._v(" "),e("p",[t._v("Target 与 传统 RunLevel 的对应关系如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Traditional runlevel      New target name     Symbolically linked to...\nRunlevel 0           |    runlevel0.target -> poweroff.target\nRunlevel 1           |    runlevel1.target -> rescue.target\nRunlevel 2           |    runlevel2.target -> multi-user.target\nRunlevel 3           |    runlevel3.target -> multi-user.target\nRunlevel 4           |    runlevel4.target -> multi-user.target\nRunlevel 5           |    runlevel5.target -> graphical.target\nRunlevel 6           |    runlevel6.target -> reboot.target\n")])])]),e("p",[t._v("有三个目录可以存放目标单元：")]),t._v(" "),e("ul",[e("li",[t._v("/etc/systemd/system：系统管理员创建的单元，开机默认启动")]),t._v(" "),e("li",[t._v("/usr/lib/systemd/system：应用程序安装包所创建的单元，开机不启动")]),t._v(" "),e("li",[t._v("/run/systemd/system：运行期间创建的单元")])]),t._v(" "),e("p",[t._v("下面举例解释 /etc/systemd/system 与 /usr/lib/systemd/system 的区别：")]),t._v(" "),e("p",[t._v("比如：Apache 安装的时候，会自动在/usr/lib/systemd/system 目录添加一个配置文件 httpd.service，如果你希望开机启动httpd，就需要运行如下的命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo systemctl enable httpd\n\nsystemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n\n")])])]),e("p",[t._v("执行命令后，/etc/systemd/system 就多了一个指向  /usr/lib/systemd/system/httpd.service 的软连接。")]),t._v(" "),e("p",[t._v("当然，直接把 httpd.service 文件拷贝到 /etc/systemd/system 也能起到同样的效果。")]),t._v(" "),e("h3",{attrs:{id:"维护命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护命令"}},[t._v("#")]),t._v(" 维护命令")]),t._v(" "),e("p",[t._v("监控和控制 Systemd 主要使用的指令是"),e("code",[t._v("systemctl")]),t._v("。主要是从来看系统状态、服务状态，以及管理系统和服务。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 通过ssh连接远程控制其他主机\nsystemctl -H <username>@<URL>\n\n# 显示系统状态\nystemctl status\n\n# 输出激活的单元列表\nsystemctl 或 systemctl list-units\n\n# 输出运行失败的单元\nsystemctl —failed\n\n# 查看所有已安装的服务 \nsystemctl list-unit-files\n")])])]),e("h3",{attrs:{id:"配置单元"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置单元"}},[t._v("#")]),t._v(" 配置单元")]),t._v(" "),e("p",[t._v("一个单元配置文件可以描述如下内容之一：系统服务（.service）、挂载点（.mount）、sockets（.sockets） 、系统设备（.device）、交换分区（.swap）、文件路径（.path）、启动目标（.target）、由 systemd 管理的计时器（.timer）。")]),t._v(" "),e("p",[t._v("我们通常在用systemctl调用单元的时候一般要单元文件的全名。也就是带上述后缀的那些。\n如果不带扩展名的话systemctl会默认成是.service文件，所以为了不发生意外一般还是推荐把名字打全了。\n挂载点和设备会自动转化为对应的后缀单元，比如/home就等价于home.mount, /dev/sda等价于dev-sda.device。")]),t._v(" "),e("p",[t._v("systemctl在enable、disable、mask子命令里面增加了--now选项，可以激活同时启动服务，激活同时停止服务等。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("立刻激活单元：$ systemctl start <unit>\n立刻停止单元：$ systemctl stop <unit>\n重启单元：$ systemctl restart <unit>\n重新加载配置：$ systemctl reload <unit>\n输出单元运行的状态：$ systemctl status <unit>\n检测单元是否为自动启动：$ systemctl is-enabled <unit>\n设置为开机自动激活单元：$ systemctl enable <unit>\n设置为开机自动激活单元并现在立刻启动：$ systemctl enable --now <unit>\n取消开机自动激活单元：$ systemctl disable <unit>\n禁用一个单元：$ systemctl mask <unit>\n取消禁用一个单元：$ systemctl unmask <unit>\n显示单元的手册页（前提是由unit提供）：$ systemctl help <unit>\n重新载入整个systemd的系统配置并扫描unit文件的变动：$ systemctl daemon-reload\n")])])]),e("h3",{attrs:{id:"配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),e("p",[t._v("一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。")]),t._v(" "),e("p",[t._v("systemctl cat命令可以用来查看配置文件，下面以sshd.service文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ systemctl cat sshd.service\n\n[Unit]\nDescription=OpenSSH server daemon\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target sshd-keygen.service\nWants=sshd-keygen.service\n\n[Service]\nEnvironmentFile=/etc/sysconfig/sshd\nExecStart=/usr/sbin/sshd -D $OPTIONS\nExecReload=/bin/kill -HUP $MAINPID\nType=simple\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("h4",{attrs:{id:"unit-区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit-区域"}},[t._v("#")]),t._v(" [Unit]区域")]),t._v(" "),e("h4",{attrs:{id:"service-区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-区域"}},[t._v("#")]),t._v(" [Service]区域")]),t._v(" "),e("p",[t._v("Service区块定义如何启动当前服务。")]),t._v(" "),e("p",[e("strong",[t._v("Type")]),t._v(" 字段定义启动类型。它可以设置的值如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("simple（默认值）：ExecStart字段启动的进程为主进程\nforking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程\noneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务\ndbus：类似于simple，但会等待 D-Bus 信号后启动\nnotify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\nidle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n")])])]),e("p",[e("strong",[t._v("启动命令")]),t._v("字段")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ExecStart字段：定义启动进程时执行的命令。\nExecReload字段：重启服务时执行的命令\nExecStop字段：停止服务时执行的命令\nExecStartPre字段：启动服务之前执行的命令\nExecStartPost字段：启动服务之后执行的命令\nExecStopPost字段：停止服务之后执行的命令\n")])])]),e("h4",{attrs:{id:"install-区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-区域"}},[t._v("#")]),t._v(" [Install]区域")]),t._v(" "),e("p",[t._v("Install区块，定义如何安装这个配置文件，即怎样做到开机启动。")]),t._v(" "),e("h3",{attrs:{id:"日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),e("p",[t._v("Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。")]),t._v(" "),e("p",[t._v("journalctl功能强大，用法非常多。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n\n# 查看内核日志（不显示应用日志）\n$ sudo journalctl -k\n\n# 查看系统本次启动的日志\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n\n# 查看指定时间的日志\n$ sudo journalctl --since="2012-10-30 18:17:16"\n$ sudo journalctl --since "20 min ago"\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since "2015-01-10" --until "2015-01-11 03:00"\n$ sudo journalctl --since 09:00 --until "1 hour ago"\n\n# 显示尾部的最新10行日志\n$ sudo journalctl -n\n\n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n\n# 实时滚动显示最新日志\n$ sudo journalctl -f\n\n# 查看指定服务的日志\n$ sudo journalctl /usr/lib/systemd/systemd\n\n# 查看指定进程的日志\n$ sudo journalctl _PID=1\n\n# 查看某个路径的脚本的日志\n$ sudo journalctl /usr/bin/bash\n\n# 查看指定用户的日志\n$ sudo journalctl _UID=33 --since today\n\n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size=1G\n\n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time=1years\n')])])]),e("h3",{attrs:{id:"常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),e("h4",{attrs:{id:"服务文件名中-代表什么意思，例如：name-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务文件名中-代表什么意思，例如：name-service"}},[t._v("#")]),t._v(" 服务文件名中@代表什么意思，例如：name@.service?")]),t._v(" "),e("p",[t._v("“@”提示符是Systemd的一个高级功能，@可以被实际的参数替换。举一个例子可以更好的说明其作用：")]),t._v(" "),e("p",[t._v("通过 Docker 部署了MySQL和Nginx，假如我们需要为这两个应用增加service文件，正常的处理方式是写两个服务单元，但如果我们学会使用@的话，一个单元就可以搞定")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#/etc/systemd/system/containers@.service\n\n[Unit]\nDescription=Service %I in container\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/bin/docker start -a %i\nExecStop=/usr/bin/docker stop %i\nTimeoutStopSec=1m\n\n[Install]\nWantedBy=default.target\n")])])]),e("p",[t._v("相比其他的.service文件，这个文件赫然有很多“%i” 参数。")]),t._v(" "),e("p",[t._v("下面两条命令就是使用此服务单元以及设置开机启动：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("systemctl start container@mysql.service\nsystemctl enable contaner@mysql.service\n")])])]),e("p",[t._v("可以，其类似于程序设计里面的类与对象的关系")]),t._v(" "),e("h2",{attrs:{id:"shell编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell编程"}},[t._v("#")]),t._v(" Shell编程")]),t._v(" "),e("p",[t._v("Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。")]),t._v(" "),e("p",[t._v("通俗的说：用户向Linux发送Shell命令（或多个命令组成的程序体）来控制Linux，故 Shell 也是一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。")]),t._v(" "),e("h3",{attrs:{id:"解释器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解释器"}},[t._v("#")]),t._v(" 解释器")]),t._v(" "),e("p",[t._v("Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。")]),t._v(" "),e("p",[t._v("Linux 的 Shell 种类众多，常见的有：")]),t._v(" "),e("ul",[e("li",[t._v("Bourne Shell（/usr/bin/sh或/bin/sh）")]),t._v(" "),e("li",[t._v("Bourne Again Shell（/bin/bash）")]),t._v(" "),e("li",[t._v("Debian Almquist Shell(dash)")]),t._v(" "),e("li",[t._v("C Shell（/usr/bin/csh）")]),t._v(" "),e("li",[t._v("K Shell（/usr/bin/ksh）")]),t._v(" "),e("li",[t._v("Shell for Root（/sbin/sh）")])]),t._v(" "),e("p",[t._v("其中，bash和dash是目前广泛使用的解释器。")]),t._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),e("p",[t._v("Shell有着面向过程的程序设计常见的语法体系，包括：")]),t._v(" "),e("ul",[e("li",[t._v("变量")]),t._v(" "),e("li",[t._v("函数")]),t._v(" "),e("li",[t._v("流程控制")]),t._v(" "),e("li",[t._v("输入输出")]),t._v(" "),e("li",[t._v("数组")]),t._v(" "),e("li",[t._v("运算符")])]),t._v(" "),e("p",[t._v("Shell语法并不复杂，边学边用就能掌握。")]),t._v(" "),e("h3",{attrs:{id:"运行脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行脚本"}},[t._v("#")]),t._v(" 运行脚本")]),t._v(" "),e("p",[t._v("Shell脚本可以保存为 .sh 文件后运行，也可以直接在Linux交互式命令中运行")]),t._v(" "),e("p",[t._v("加入我们编写了一段Shell程序，内容如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi\n')])])]),e("p",[t._v("将上面的代码保存为 test.sh，并 cd 到相应目录，然后选择如下的一种执行命令的方式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#方式一：./ 执行脚本\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n\n#方式二：直接用解释器执行脚本\n/bin/sh test.sh\n\n#方式三：直接用解释器执行脚本\nbash test.sh\n\n#方式四：直接在交互式命令上中运行一段Shell程序\nif [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi\n\n')])])]),e("h2",{attrs:{id:"认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#认证"}},[t._v("#")]),t._v(" 认证")]),t._v(" "),e("p",[t._v("Linux认证指获得专业Linux培训后通过考试得到的资格。国际上广泛承认的Linux认证有LinuxProfessionalInstitute（简称为LPI）、SairLinux和GNU、Linux+和RedHatCertifiedEngineer。")]),t._v(" "),e("p",[t._v("以RedHat为例，主要的认证等级包括：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("认证考试")]),t._v(" "),e("th",[t._v("认证培训课程编号")]),t._v(" "),e("th",[t._v("认证培训课程名称")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("RHCSA")]),t._v(" "),e("td",[t._v("RH124,RH135")]),t._v(" "),e("td",[t._v("红帽认证系统管理员")])]),t._v(" "),e("tr",[e("td",[t._v("RHCE")]),t._v(" "),e("td",[t._v("RH254")]),t._v(" "),e("td",[t._v("红帽认证工程师")])]),t._v(" "),e("tr",[e("td",[t._v("RHCA")]),t._v(" "),e("td",[t._v("RH401,RH436,RH423,RH442,RHS333")]),t._v(" "),e("td",[t._v("红帽认证架构师")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);